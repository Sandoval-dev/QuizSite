@model QuizFormModel

@{
    ViewData["Title"] = "Create Quiz";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<style>
    :root {
        --charcoal: #264653;
        --persian-green: #2a9d8f;
        --saffron: #e9c46a;
        --sandy-brown: #f4a261;
        --burnt-sienna: #e76f51;
        --light-bg: #f8f9fa;
    }

    /* Base Styles */
    .form-section {
        background-color: #fff;
        padding: 2rem;
        border-radius: 1rem;
        box-shadow: 0 6px 18px rgba(0, 0, 0, 0.08);
        margin-bottom: 2rem;
        border: 1px solid rgba(0,0,0,0.05);
        transition: all 0.3s ease;
    }

    .form-section:hover {
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
    }

    .form-section h4 {
        color: var(--charcoal);
        font-weight: 600;
        position: relative;
        padding-bottom: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .form-section h4::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 60px;
        height: 3px;
        background: linear-gradient(90deg, var(--persian-green), var(--sandy-brown));
    }

    /* Buttons */
    .btn-custom {
        background-color: var(--persian-green);
        color: white;
        border: none;
        padding: 0.6rem 1.5rem;
        font-weight: 500;
        border-radius: 8px;
        transition: all 0.3s ease;
        box-shadow: 0 2px 6px rgba(42, 157, 143, 0.3);
    }

    .btn-custom:hover {
        background-color: var(--sandy-brown);
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(244, 162, 97, 0.4);
    }

    /* Form Elements */
    .form-control, .form-select {
        border-radius: 8px;
        padding: 0.6rem 1rem;
        border: 1px solid #ced4da;
        transition: all 0.3s ease;
    }

    .form-control:focus, .form-select:focus {
        border-color: var(--persian-green);
        box-shadow: 0 0 0 0.25rem rgba(42, 157, 143, 0.25);
    }

    .form-label {
        font-weight: 500;
        color: var(--charcoal);
        margin-bottom: 0.5rem;
    }

    /* Question Selection */
    #question-select {
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    #question-select:focus {
        border-color: var(--persian-green);
        box-shadow: 0 0 0 0.25rem rgba(42, 157, 143, 0.25);
    }

    /* Preview Section */
    .selected-question-preview {
        background-color: var(--light-bg);
        padding: 1.25rem;
        border-radius: 0.75rem;
        max-height: 300px;
        overflow-y: auto;
        margin-top: 1rem;
        border: 1px dashed rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }

    .selected-question-preview:hover {
        border-color: var(--persian-green);
    }

    .selected-question-preview li {
        padding: 0.75rem;
        border-bottom: 1px dashed rgba(0,0,0,0.1);
        transition: all 0.2s ease;
        border-radius: 6px;
        margin-bottom: 0.5rem;
        background-color: white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .selected-question-preview li:hover {
        transform: translateX(5px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .selected-question-preview li:last-child {
        border-bottom: none;
        margin-bottom: 0;
    }

    /* Animations */
    .fade-in {
        animation: fadeIn 0.6s ease-out;
    }

    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .pulse {
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.02); }
        100% { transform: scale(1); }
    }

    /* Responsive Adjustments */
    @@media (max-width: 768px) {
        .form-section {
            padding: 1.5rem;
        }
        
        #question-select {
            font-size: 0.9rem;
        }
    }
</style>

<div class="container mt-4 fade-in">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0" style="font-weight: 700; color: var(--charcoal);">ðŸ“˜ Create New Quiz</h2>
        <div class="pulse">
            <span class="badge rounded-pill py-2 px-3" style="background-color: var(--persian-green);">
                <i class="fas fa-plus-circle me-1"></i> New Quiz
            </span>
        </div>
    </div>

    <form asp-action="Create" method="post">
        <div class="form-section mb-4">
            <h4>Basic Information</h4>
            <div class="mb-4">
                <label class="form-label">Quiz Title</label>
                <input asp-for="Title" class="form-control" placeholder="Enter quiz title" />
                <span asp-validation-for="Title" class="text-danger small mt-1 d-block"></span>
            </div>
            <div class="mb-4">
                <label class="form-label">Description</label>
                <textarea asp-for="Description" class="form-control" rows="3" placeholder="Enter quiz description"></textarea>
                <span asp-validation-for="Description" class="text-danger small mt-1 d-block"></span>
            </div>
            <div class="row">
                <div class="col-md-6 mb-4">
                    <label class="form-label">Category</label>
                    <select asp-for="CategoryId" asp-items="ViewBag.Categories" class="form-select">
                        <option value="">-- Select Category --</option>
                    </select>
                    <span asp-validation-for="CategoryId" class="text-danger small mt-1 d-block"></span>
                </div>
                <div class="col-md-6 mb-4">
                    <label class="form-label">Duration (Minutes)</label>
                    <input asp-for="DurationInMinutes" class="form-control" type="number" min="1" max="180" placeholder="e.g. 30" />
                    <span asp-validation-for="DurationInMinutes" class="text-danger small mt-1 d-block"></span>
                </div>
            </div>
        </div>

        <div class="form-section mb-4">
            <h4>Question Selection</h4>
            <div class="mb-3">
                <label class="form-label">Select Questions</label>
                <select asp-for="SelectedQuestionIds" asp-items="ViewBag.Questions" class="form-select" multiple size="10" id="question-select"></select>
                <small class="text-muted mt-1 d-block">
                    <i class="fas fa-info-circle me-1"></i> Hold Ctrl (Windows) or Command (Mac) to select multiple questions
                </small>
            </div>

            <div class="mt-4">
                <h5 class="d-flex align-items-center">
                    <i class="fas fa-list-check me-2" style="color: var(--persian-green);"></i>
                    Selected Questions Preview
                </h5>
                <div class="selected-question-preview">
                    <ul id="preview-list" class="list-unstyled mb-0">
                        <!-- Preview items will be added here by JavaScript -->
                    </ul>
                    <div id="empty-preview" class="text-center py-4 text-muted">
                        <i class="fas fa-inbox fa-2x mb-2"></i>
                        <p class="mb-0">No questions selected yet</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="text-end mt-4">
            <button type="submit" class="btn btn-custom btn-lg">
                <i class="fas fa-save me-2"></i> Create Quiz
            </button>
        </div>
    </form>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial.cshtml")
    <script>
        const allQuestions = @Html.Raw(Json.Serialize(ViewBag.QuestionList));
        const categorySelect = document.getElementById("CategoryId");
        const questionSelect = document.getElementById("question-select");
        const previewList = document.getElementById("preview-list");
        const emptyPreview = document.getElementById("empty-preview");

        function populateQuestionsByCategory(categoryId) {
            questionSelect.innerHTML = "";
            const filtered = allQuestions.filter(q => q.categoryId == categoryId);

            if (filtered.length === 0) {
                const option = document.createElement("option");
                option.text = "No questions available for this category";
                option.disabled = true;
                questionSelect.appendChild(option);
            } else {
                filtered.forEach(q => {
                    const option = document.createElement("option");
                    option.value = q.id;
                    option.text = q.text;
                    questionSelect.appendChild(option);
                });
            }

            previewList.innerHTML = "";
            toggleEmptyPreview();
        }

        function toggleEmptyPreview() {
            if (previewList.children.length > 0) {
                emptyPreview.style.display = "none";
            } else {
                emptyPreview.style.display = "block";
            }
        }

        function createPreviewItem(question) {
            const li = document.createElement("li");
            li.className = "animate__animated animate__fadeIn";
            li.innerHTML = `
                <div class="d-flex justify-content-between align-items-start">
                    <div>
                        <strong>${question.text}</strong>
                        <div class="mt-1">
                            <span class="badge bg-success bg-opacity-10 text-success small">
                                <i class="fas fa-check-circle me-1"></i> ${question.correctAnswer}
                            </span>
                        </div>
                    </div>
                    <button type="button" class="btn btn-sm btn-outline-danger remove-question" data-id="${question.id}">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;
            return li;
        }

        categorySelect.addEventListener("change", function () {
            const selectedCategory = this.value;
            if (selectedCategory) {
                populateQuestionsByCategory(selectedCategory);
            } else {
                questionSelect.innerHTML = '<option value="">-- Select a category first --</option>';
                previewList.innerHTML = "";
                toggleEmptyPreview();
            }
        });

        questionSelect.addEventListener("change", function () {
            previewList.innerHTML = "";
            const selectedOptions = Array.from(this.selectedOptions);
            
            selectedOptions.forEach(opt => {
                const id = opt.value;
                const q = allQuestions.find(q => q.id == id);
                if (q) {
                    previewList.appendChild(createPreviewItem(q));
                }
            });
            
            toggleEmptyPreview();
        });

        // Handle click on remove buttons
        previewList.addEventListener("click", function(e) {
            if (e.target.closest(".remove-question")) {
                const button = e.target.closest(".remove-question");
                const questionId = button.getAttribute("data-id");
                
                // Remove from select
                const option = questionSelect.querySelector(`option[value="${questionId}"]`);
                if (option) option.selected = false;
                
                // Remove from preview
                const item = button.closest("li");
                item.classList.add("animate__fadeOut");
                setTimeout(() => {
                    item.remove();
                    toggleEmptyPreview();
                }, 300);
            }
        });

        // Initialize if category is already selected
        if (categorySelect.value) {
            populateQuestionsByCategory(categorySelect.value);
        }
    </script>
}