@model QuizSolveViewModel

@{
    ViewData["Title"] = "Quiz Başlat";
    Layout = "~/Views/Shared/_SiteLayout.cshtml";

    int currentPage = Model.CurrentPage;
    int totalPages = Model.TotalPages;
}

<style>
    :root {
        --charcoal: #264653;
        --persian-green: #2a9d8f;
        --saffron: #e9c46a;
        --sandy-brown: #f4a261;
        --burnt-sienna: #e76f51;
        --white: #fff;
        --gray-light: #f8f9fa;
        --gray-medium: #6c757d;
        --dark-blue: #1a3a5f;
    }

    body {
        background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);
        color: var(--charcoal);
        font-family: 'Poppins', sans-serif;
        min-height: 100vh;
    }

    .quiz-container {
        max-width: 800px;
        margin: 30px auto;
        padding: 0 15px;
    }

    .quiz-header {
        text-align: center;
        margin-bottom: 30px;
        position: relative;
    }

    .quiz-title {
        font-weight: 700;
        color: var(--dark-blue);
        margin-bottom: 10px;
        font-size: 2.2rem;
        letter-spacing: 0.5px;
        position: relative;
        display: inline-block;
    }

    .quiz-title:after {
        content: '';
        position: absolute;
        width: 60%;
        height: 4px;
        background: linear-gradient(90deg, var(--persian-green), var(--saffron));
        bottom: -8px;
        left: 20%;
        border-radius: 2px;
    }

    .quiz-progress {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
    }

    .progress-container {
        flex-grow: 1;
        height: 10px;
        background-color: #e0e0e0;
        border-radius: 5px;
        overflow: hidden;
        margin: 0 15px;
    }

    .progress-bar {
        height: 100%;
        background: linear-gradient(90deg, var(--persian-green), var(--saffron));
        transition: width 0.4s ease;
    }

    .page-indicator {
        font-weight: 600;
        color: var(--dark-blue);
        white-space: nowrap;
    }

    .countdown-container {
        background: linear-gradient(135deg, var(--persian-green), #1d7870);
        color: var(--white);
        border-radius: 50px;
        padding: 10px 25px;
        display: inline-flex;
        align-items: center;
        box-shadow: 0 4px 15px rgba(42, 157, 143, 0.3);
        margin-bottom: 25px;
    }

    .countdown-icon {
        margin-right: 10px;
        font-size: 1.2rem;
    }

    .countdown {
        font-size: 1.3rem;
        font-weight: 700;
        letter-spacing: 1px;
    }

    .questions-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 25px;
        margin-bottom: 30px;
    }

    .question-card {
        background-color: var(--white);
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border: none;
    }

    .question-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.12);
    }

    .question-header {
        background: linear-gradient(135deg, var(--dark-blue), var(--charcoal));
        color: var(--white);
        padding: 15px 20px;
        font-weight: 600;
        font-size: 1.1rem;
        position: relative;
    }

    .question-header:after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 3px;
        background: linear-gradient(90deg, var(--saffron), var(--burnt-sienna));
    }

    .question-body {
        padding: 20px;
    }

    .question-text {
        font-size: 1.05rem;
        line-height: 1.6;
        margin-bottom: 20px;
        color: var(--charcoal);
    }

    .options-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .option-item {
        margin-bottom: 12px;
        position: relative;
    }

    .option-input {
        position: absolute;
        opacity: 0;
    }

    .option-label {
        display: flex;
        align-items: center;
        padding: 12px 15px;
        background-color: #f8f9fa;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
        border: 2px solid #e9ecef;
    }

    .option-label:hover {
        background-color: #e9ecef;
    }

    .option-input:checked + .option-label {
        background-color: rgba(233, 196, 106, 0.2);
        border-color: var(--saffron);
    }

    .option-input:focus + .option-label {
        box-shadow: 0 0 0 3px rgba(233, 196, 106, 0.4);
    }

    .custom-radio {
        width: 20px;
        height: 20px;
        border: 2px solid var(--gray-medium);
        border-radius: 50%;
        margin-right: 15px;
        position: relative;
        flex-shrink: 0;
        transition: border-color 0.2s ease;
    }

    .option-input:checked + .option-label .custom-radio {
        border-color: var(--saffron);
        background-color: var(--saffron);
    }

    .custom-radio:after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) scale(0);
        width: 10px;
        height: 10px;
        background-color: var(--white);
        border-radius: 50%;
        transition: transform 0.2s ease;
    }

    .option-input:checked + .option-label .custom-radio:after {
        transform: translate(-50%, -50%) scale(1);
    }

    .option-text {
        font-size: 1rem;
        color: var(--charcoal);
    }

    .navigation-buttons {
        display: flex;
        justify-content: space-between;
        margin-top: 30px;
    }

    .nav-btn {
        padding: 12px 30px;
        border-radius: 8px;
        font-weight: 600;
        border: none;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .nav-btn i {
        margin-right: 8px;
    }

    .btn-prev {
        background-color: var(--gray-light);
        color: var(--gray-medium);
    }

    .btn-prev:hover {
        background-color: #e2e6ea;
        color: var(--charcoal);
    }

    .btn-next, .btn-submit {
        background: linear-gradient(135deg, var(--saffron), var(--sandy-brown));
        color: var(--charcoal);
        box-shadow: 0 4px 15px rgba(244, 162, 97, 0.3);
    }

    .btn-next:hover, .btn-submit:hover {
        background: linear-gradient(135deg, var(--sandy-brown), var(--burnt-sienna));
        color: var(--white);
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(231, 111, 81, 0.4);
    }

    .btn-submit {
        width: 100%;
        padding: 15px;
        font-size: 1.1rem;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .questions-container {
            grid-template-columns: 1fr;
        }
        
        .quiz-title {
            font-size: 1.8rem;
        }
        
        .navigation-buttons {
            flex-direction: column;
            gap: 15px;
        }
        
        .nav-btn {
            width: 100%;
        }
    }
</style>

<div class="quiz-container">
    <div class="quiz-header">
        <h1 class="quiz-title">@Model.Title</h1>
        
        <div class="countdown-container">
            <span class="countdown-icon">⏱️</span>
            <span class="countdown" id="countdown">@ViewBag.RemainingSeconds</span>
        </div>
    </div>
     @await Html.PartialAsync("Partials/Site/_Message")
    <div class="quiz-progress">
        <span class="page-indicator">Soru @((currentPage - 1) * 2 + 1)-@Math.Min(currentPage * 2, Model.TotalQues)</span>
        <div class="progress-container">
            <div class="progress-bar" style="width: @((currentPage * 100) / totalPages)%"></div>
        </div>
        <span class="page-indicator">@Model.TotalQues Soru</span>
    </div>

    <form method="post" asp-route-itemid="@Model.QuizId" asp-action="Start" asp-controller="Quiz" id="quizForm">
        @Html.AntiForgeryToken()
        <input type="hidden" name="id" value="@Model.QuizId" />
        <input type="hidden" name="page" id="pageInput" value="@Model.CurrentPage" />

        <div class="questions-container">
            @foreach (var question in Model.Questions)
            {
                <div class="question-card">
                    <div class="question-header">
                        Soru @((Model.CurrentPage - 1) * 2 + Model.Questions.IndexOf(question) + 1)
                    </div>
                    <div class="question-body">
                        <p class="question-text">@question.Text</p>
                        <ul class="options-list">
                            @foreach (var option in question.Options)
                            {
                                <li class="option-item">
                                    <input class="option-input" type="radio" name="Answers[@question.Id]" 
                                           value="@option.Id" id="option_@option.Id" 
                                           @(question.SelectedOptionId == option.Id ? "checked" : "") />
                                    <label class="option-label" for="option_@option.Id">
                                        <span class="custom-radio"></span>
                                        <span class="option-text">@option.Text</span>
                                    </label>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            }
        </div>

        <div class="navigation-buttons">
            @if (currentPage > 1)
            {
                <button type="submit" name="action" value="prev" class="nav-btn btn-prev">
                    <i class="fas fa-arrow-left"></i> Önceki
                </button>
            }
            else
            {
                <div></div> 
            }
            
            @if (currentPage < totalPages)
            {
                <button type="submit" name="action" value="next" class="nav-btn btn-next">
                    Sonraki  <i style="margin-left: 5px;" class="fas fa-arrow-right"></i>
                </button>
            }
            else if (currentPage == totalPages)
            {
                <button type="submit" name="action" value="submit" class="nav-btn btn-submit">
                    <i class="fas fa-paper-plane"></i> Quiz'i Gönder
                </button>
            }
        </div>
    </form>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/js/all.min.js"></script>
    <script>
        // Countdown timer
        let remainingSeconds = @ViewBag.RemainingSeconds;
        const totalPages = @Model.TotalPages;
        const pageInput = document.getElementById('pageInput');
        const quizForm = document.getElementById('quizForm');
        const countdownEl = document.getElementById('countdown');
        
        function formatTime(seconds) {
            const m = Math.floor(seconds / 60);
            const s = seconds % 60;
            return `${m.toString().padStart(2, '0')}:${s.toString().padStart(2, '0')}`;
        }

        function updateCountdown() {
            countdownEl.textContent = formatTime(remainingSeconds);
            
            if (remainingSeconds <= 0) {
                // Time's up! Submit the form
                   const form = document.getElementById('quizForm');

   const existingInput = form.querySelector('input[name="action"]');
    if (existingInput) existingInput.remove();

    const input = document.createElement('input');
    input.type = 'hidden';
    input.name = 'action';
    input.value = 'submit';
    form.appendChild(input);

    form.submit();
            } else {
                remainingSeconds--;
                setTimeout(updateCountdown, 1000);
            }
            
            // Change color when time is running out
            if (remainingSeconds <= 30) {
                document.querySelector('.countdown-container').style.background = 
                    'linear-gradient(135deg, var(--burnt-sienna), #d45a3a)';
            }
        }
        
        updateCountdown();

        // Add animation to option selection
        document.querySelectorAll('.option-input').forEach(input => {
            input.addEventListener('change', function() {
                const label = this.nextElementSibling;
                label.style.transform = 'scale(0.98)';
                setTimeout(() => {
                    label.style.transform = 'scale(1)';
                }, 200);
            });
        });

        // Page navigation
document.querySelectorAll('button[name="action"]').forEach(btn => {
    btn.addEventListener('click', function(event) {
        if (this.value === 'submit') {
            // submit butonuna tıklandığında event.preventDefault() olmasın
            // yani doğal form submit gerçekleşsin
            return;
        }

        event.preventDefault();

        let currentPage = parseInt(pageInput.value, 10) || 1;

        if (this.value === 'prev') {
            pageInput.value = Math.max(1, currentPage - 1);
        } else if (this.value === 'next') {
            pageInput.value = Math.min(totalPages, currentPage + 1);
        }

        quizForm.submit();
    });
});


    </script>
}